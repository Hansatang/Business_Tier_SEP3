// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/businessServer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Business_Tier_SEP3 {
  /// <summary>
  /// The business service definition.
  /// </summary>
  public static partial class BusinessServer
  {
    static readonly string __ServiceName = "BusinessServ.BusinessServer";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Business_Tier_SEP3.Request> __Marshaller_BusinessServ_Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.Request.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.Reply> __Marshaller_BusinessServ_Reply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.Reply.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.NoteRequest> __Marshaller_BusinessServ_NoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.NoteRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.PostGroupRequest> __Marshaller_BusinessServ_PostGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.PostGroupRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.AddGroupMemberRequest> __Marshaller_BusinessServ_AddGroupMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.AddGroupMemberRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.UserRequest> __Marshaller_BusinessServ_UserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.UserRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.DeleteGroupMemberRequest> __Marshaller_BusinessServ_DeleteGroupMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.DeleteGroupMemberRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.RegisterRequest> __Marshaller_BusinessServ_RegisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.RegisterRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.RegisterReply> __Marshaller_BusinessServ_RegisterReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.RegisterReply.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.GetUserRequest> __Marshaller_BusinessServ_GetUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.GetUserRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.EditUserRequest> __Marshaller_BusinessServ_EditUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.EditUserRequest.Parser));
    static readonly grpc::Marshaller<global::Business_Tier_SEP3.PostInvitationRequest> __Marshaller_BusinessServ_PostInvitationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Business_Tier_SEP3.PostInvitationRequest.Parser));

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_GetNoteList = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteList",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.NoteRequest, global::Business_Tier_SEP3.Reply> __Method_PostNote = new grpc::Method<global::Business_Tier_SEP3.NoteRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostNote",
        __Marshaller_BusinessServ_NoteRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.NoteRequest, global::Business_Tier_SEP3.Reply> __Method_PutNote = new grpc::Method<global::Business_Tier_SEP3.NoteRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutNote",
        __Marshaller_BusinessServ_NoteRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_DeleteNote = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNote",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_GetGroupList = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGroupList",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.PostGroupRequest, global::Business_Tier_SEP3.Reply> __Method_PostGroup = new grpc::Method<global::Business_Tier_SEP3.PostGroupRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostGroup",
        __Marshaller_BusinessServ_PostGroupRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_DeleteGroup = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGroup",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_GetGroupMemberList = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGroupMemberList",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.AddGroupMemberRequest, global::Business_Tier_SEP3.Reply> __Method_AddGroupMember = new grpc::Method<global::Business_Tier_SEP3.AddGroupMemberRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGroupMember",
        __Marshaller_BusinessServ_AddGroupMemberRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.UserRequest, global::Business_Tier_SEP3.Reply> __Method_DeleteGroupMember = new grpc::Method<global::Business_Tier_SEP3.UserRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGroupMember",
        __Marshaller_BusinessServ_UserRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.DeleteGroupMemberRequest, global::Business_Tier_SEP3.Reply> __Method_LeaveGroup = new grpc::Method<global::Business_Tier_SEP3.DeleteGroupMemberRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaveGroup",
        __Marshaller_BusinessServ_DeleteGroupMemberRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_ValidateUser = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateUser",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.RegisterRequest, global::Business_Tier_SEP3.RegisterReply> __Method_RegisterUser = new grpc::Method<global::Business_Tier_SEP3.RegisterRequest, global::Business_Tier_SEP3.RegisterReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterUser",
        __Marshaller_BusinessServ_RegisterRequest,
        __Marshaller_BusinessServ_RegisterReply);

    static readonly grpc::Method<global::Business_Tier_SEP3.GetUserRequest, global::Business_Tier_SEP3.Reply> __Method_GetUserList = new grpc::Method<global::Business_Tier_SEP3.GetUserRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserList",
        __Marshaller_BusinessServ_GetUserRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.EditUserRequest, global::Business_Tier_SEP3.Reply> __Method_EditUser = new grpc::Method<global::Business_Tier_SEP3.EditUserRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditUser",
        __Marshaller_BusinessServ_EditUserRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.UserRequest, global::Business_Tier_SEP3.Reply> __Method_DeleteUser = new grpc::Method<global::Business_Tier_SEP3.UserRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUser",
        __Marshaller_BusinessServ_UserRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_GetInvitationList = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInvitationList",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.PostInvitationRequest, global::Business_Tier_SEP3.Reply> __Method_PostInvitation = new grpc::Method<global::Business_Tier_SEP3.PostInvitationRequest, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInvitation",
        __Marshaller_BusinessServ_PostInvitationRequest,
        __Marshaller_BusinessServ_Reply);

    static readonly grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply> __Method_DeleteInvitation = new grpc::Method<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInvitation",
        __Marshaller_BusinessServ_Request,
        __Marshaller_BusinessServ_Reply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Business_Tier_SEP3.BusinessServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BusinessServer</summary>
    [grpc::BindServiceMethod(typeof(BusinessServer), "BindService")]
    public abstract partial class BusinessServerBase
    {
      /// <summary>
      ///Note
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> GetNoteList(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> PostNote(global::Business_Tier_SEP3.NoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> PutNote(global::Business_Tier_SEP3.NoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> DeleteNote(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Group
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> GetGroupList(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> PostGroup(global::Business_Tier_SEP3.PostGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> DeleteGroup(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///GroupMember
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> GetGroupMemberList(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> AddGroupMember(global::Business_Tier_SEP3.AddGroupMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> DeleteGroupMember(global::Business_Tier_SEP3.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> LeaveGroup(global::Business_Tier_SEP3.DeleteGroupMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///User 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> ValidateUser(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.RegisterReply> RegisterUser(global::Business_Tier_SEP3.RegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> GetUserList(global::Business_Tier_SEP3.GetUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> EditUser(global::Business_Tier_SEP3.EditUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> DeleteUser(global::Business_Tier_SEP3.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Invitation 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> GetInvitationList(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> PostInvitation(global::Business_Tier_SEP3.PostInvitationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Business_Tier_SEP3.Reply> DeleteInvitation(global::Business_Tier_SEP3.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BusinessServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetNoteList, serviceImpl.GetNoteList)
          .AddMethod(__Method_PostNote, serviceImpl.PostNote)
          .AddMethod(__Method_PutNote, serviceImpl.PutNote)
          .AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote)
          .AddMethod(__Method_GetGroupList, serviceImpl.GetGroupList)
          .AddMethod(__Method_PostGroup, serviceImpl.PostGroup)
          .AddMethod(__Method_DeleteGroup, serviceImpl.DeleteGroup)
          .AddMethod(__Method_GetGroupMemberList, serviceImpl.GetGroupMemberList)
          .AddMethod(__Method_AddGroupMember, serviceImpl.AddGroupMember)
          .AddMethod(__Method_DeleteGroupMember, serviceImpl.DeleteGroupMember)
          .AddMethod(__Method_LeaveGroup, serviceImpl.LeaveGroup)
          .AddMethod(__Method_ValidateUser, serviceImpl.ValidateUser)
          .AddMethod(__Method_RegisterUser, serviceImpl.RegisterUser)
          .AddMethod(__Method_GetUserList, serviceImpl.GetUserList)
          .AddMethod(__Method_EditUser, serviceImpl.EditUser)
          .AddMethod(__Method_DeleteUser, serviceImpl.DeleteUser)
          .AddMethod(__Method_GetInvitationList, serviceImpl.GetInvitationList)
          .AddMethod(__Method_PostInvitation, serviceImpl.PostInvitation)
          .AddMethod(__Method_DeleteInvitation, serviceImpl.DeleteInvitation).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BusinessServerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetNoteList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.GetNoteList));
      serviceBinder.AddMethod(__Method_PostNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.NoteRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.PostNote));
      serviceBinder.AddMethod(__Method_PutNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.NoteRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.PutNote));
      serviceBinder.AddMethod(__Method_DeleteNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.DeleteNote));
      serviceBinder.AddMethod(__Method_GetGroupList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.GetGroupList));
      serviceBinder.AddMethod(__Method_PostGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.PostGroupRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.PostGroup));
      serviceBinder.AddMethod(__Method_DeleteGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.DeleteGroup));
      serviceBinder.AddMethod(__Method_GetGroupMemberList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.GetGroupMemberList));
      serviceBinder.AddMethod(__Method_AddGroupMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.AddGroupMemberRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.AddGroupMember));
      serviceBinder.AddMethod(__Method_DeleteGroupMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.UserRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.DeleteGroupMember));
      serviceBinder.AddMethod(__Method_LeaveGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.DeleteGroupMemberRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.LeaveGroup));
      serviceBinder.AddMethod(__Method_ValidateUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.ValidateUser));
      serviceBinder.AddMethod(__Method_RegisterUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.RegisterRequest, global::Business_Tier_SEP3.RegisterReply>(serviceImpl.RegisterUser));
      serviceBinder.AddMethod(__Method_GetUserList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.GetUserRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.GetUserList));
      serviceBinder.AddMethod(__Method_EditUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.EditUserRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.EditUser));
      serviceBinder.AddMethod(__Method_DeleteUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.UserRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.DeleteUser));
      serviceBinder.AddMethod(__Method_GetInvitationList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.GetInvitationList));
      serviceBinder.AddMethod(__Method_PostInvitation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.PostInvitationRequest, global::Business_Tier_SEP3.Reply>(serviceImpl.PostInvitation));
      serviceBinder.AddMethod(__Method_DeleteInvitation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Business_Tier_SEP3.Request, global::Business_Tier_SEP3.Reply>(serviceImpl.DeleteInvitation));
    }

  }
}
#endregion
